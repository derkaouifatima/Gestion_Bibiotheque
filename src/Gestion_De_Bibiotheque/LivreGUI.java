/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Gestion_De_Bibiotheque;

import Gestion_De_Bibiotheque.DatabaseConnection;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author pc
 */
public class LivreGUI extends javax.swing.JFrame {
private BibliothequeGUI bibliothequeDAO;

    /**
     * Creates new form LivreGUI
     */
    public LivreGUI() {
         bibliothequeDAO = new BibliothequeGUI();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
 

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        livreidField = new javax.swing.JTextField();
        titreField = new javax.swing.JTextField();
        auteurIDField = new javax.swing.JTextField();
        isbnField = new javax.swing.JTextField();
        genreField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        disponibiliteCheckBox = new javax.swing.JCheckBox();
        datePublicationField = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listlivre = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        RechercheTextField1 = new javax.swing.JTextField();
        ajouterButton = new javax.swing.JButton();
        suprimerButton = new javax.swing.JButton();
        modifierButton = new javax.swing.JButton();
        afficherButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        jButton3.setText("Ajouter Livre ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("                      Contact");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("LivreID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("ISBN");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("AuteurID");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Titre");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Genre");

        livreidField.setBackground(new java.awt.Color(204, 0, 0));
        livreidField.setForeground(new java.awt.Color(255, 255, 255));

        isbnField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isbnFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("DatePublication");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Disponibilite");

        datePublicationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePublicationFieldActionPerformed(evt);
            }
        });

        listlivre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "LivreID", "Titre", "AuteurID", "Genre", "ISBN", "DatePublication", "Disponibilite"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        listlivre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listlivreMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listlivreMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listlivre);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("RECHERCHE");

        RechercheTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                RechercheTextField1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(isbnField, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                                    .addComponent(auteurIDField)
                                    .addComponent(titreField)
                                    .addComponent(livreidField)
                                    .addComponent(disponibiliteCheckBox)
                                    .addComponent(datePublicationField))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RechercheTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(RechercheTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(livreidField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titreField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(auteurIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isbnField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(datePublicationField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(disponibiliteCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        ajouterButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ajouterButton.setText("Ajouter Livre ");
        ajouterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterButtonActionPerformed(evt);
            }
        });

        suprimerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        suprimerButton.setText("Suprimer Livre ");
        suprimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suprimerButtonActionPerformed(evt);
            }
        });

        modifierButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        modifierButton.setText("Modefier Livre ");
        modifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierButtonActionPerformed(evt);
            }
        });

        afficherButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        afficherButton.setText("Afficher Livre");
        afficherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficherButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel8.setText("     GESTION LIVRE");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(ajouterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suprimerButton)
                        .addGap(3, 3, 3)
                        .addComponent(modifierButton)
                        .addGap(3, 3, 3)
                        .addComponent(afficherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ajouterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suprimerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(afficherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ajouterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterButtonActionPerformed

    // Récupération des valeurs des champs de texte
    String title = titreField.getText();
    String author = auteurIDField.getText();
    String genre = genreField.getText();
    String isbn = isbnField.getText();
    String datepublication = datePublicationField.getText();
    boolean disponibilite = disponibiliteCheckBox.isSelected(); // Checkbox pour la disponibilité

    // Validation des champs
    if (title.isEmpty() || author.isEmpty() || genre.isEmpty() || isbn.isEmpty() || datepublication.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs.");
        return;
    }

    // Requête SQL sans LivreID (s'il est auto-incrémenté)
    String sql = "INSERT INTO Livres (Titre, AuteurID, Genre, ISBN, DatePublication, Disponibilite) VALUES (?, ?, ?, ?, ?, ?)";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // Vérification de la connexion à la base de données
        if (conn == null) {
            throw new SQLException("Connexion à la base de données échouée.");
        }

        // Configuration des paramètres de la requête
        pstmt.setString(1, title);
        pstmt.setString(2, author);
        pstmt.setString(3, genre);
        pstmt.setString(4, isbn);
        
        // Conversion de la date (si nécessaire)
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date parsedDate = dateFormat.parse(datepublication);
            pstmt.setDate(5, new java.sql.Date(parsedDate.getTime()));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Format de date incorrect. Utilisez 'YYYY-MM-DD'.");
            return;
        }

        // Configuration du booléen pour la disponibilité
        pstmt.setBoolean(6, disponibilite);

        // Exécution de la mise à jour
        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Livre ajouté avec succès!");

            // Effacement des champs après ajout
            titreField.setText("");
            auteurIDField.setText("");
            genreField.setText("");
            isbnField.setText("");
            datePublicationField.setText("");
            disponibiliteCheckBox.setSelected(false);

            // Actualisation de l'affichage des livres
            afficherButtonActionPerformed(evt); 
        }

    } catch (SQLException e) {
        e.printStackTrace(); // Journalisation de l'erreur
        JOptionPane.showMessageDialog(null, "Erreur lors de l'ajout du livre : " + e.getMessage());
    }

    }//GEN-LAST:event_ajouterButtonActionPerformed

    private void suprimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suprimerButtonActionPerformed
                                               
    int selectedRow = listlivre.getSelectedRow();
    if (selectedRow != -1) {
        // Get the LivreID from the selected row
        int livreID = (int) listlivre.getValueAt(selectedRow, 0); // Assuming LivreID is in the first column
        
        String sql = "DELETE FROM Livres WHERE LivreID = ?";
        
        int confirm = JOptionPane.showConfirmDialog(null, "Êtes-vous sûr de vouloir supprimer ce livre?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                 
                pstmt.setInt(1, livreID);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "Livre supprimé avec succès!");
                
                // Refresh the table after deletion
                afficherButtonActionPerformed(evt); // Refresh the table
            } catch (SQLException e) {
                e.printStackTrace(); // Print stack trace for debugging
                JOptionPane.showMessageDialog(null, "Erreur lors de la suppression des données : " + e.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Veuillez sélectionner un livre à supprimer.");
    }



    }//GEN-LAST:event_suprimerButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
//
    

// Method to modify book details

///
    private void modifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierButtonActionPerformed
   
    // Récupération des valeurs des champs de texte
    String livreID = livreidField.getText(); // ID du livre à modifier (important pour la requête WHERE)
    String title = titreField.getText();
    String author = auteurIDField.getText();
    String genre = genreField.getText();
    String isbn = isbnField.getText();
    String datepublication = datePublicationField.getText();
    boolean disponibilite = disponibiliteCheckBox.isSelected(); // Checkbox pour la disponibilité

    // Validation des champs
    if (livreID.isEmpty() || title.isEmpty() || author.isEmpty() || genre.isEmpty() || isbn.isEmpty() || datepublication.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Veuillez remplir tous les champs.");
        return;
    }

    // Requête SQL de mise à jour
    String sql = "UPDATE Livres SET Titre = ?, AuteurID = ?, Genre = ?, ISBN = ?, "
            + "DatePublication = ?, Disponibilite = ? WHERE LivreID = ?";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // Vérification de la connexion à la base de données
        if (conn == null) {
            throw new SQLException("Connexion à la base de données échouée.");
        }

        // Configuration des paramètres de la requête
        pstmt.setString(1, title);
        pstmt.setString(2, author);
        pstmt.setString(3, genre);
        pstmt.setString(4, isbn);

        // Conversion de la date (si nécessaire)
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date parsedDate = dateFormat.parse(datepublication);
            pstmt.setDate(5, new java.sql.Date(parsedDate.getTime()));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Format de date incorrect. Utilisez 'YYYY-MM-DD'.");
            return;
        }

        // Configuration du booléen pour la disponibilité
        pstmt.setBoolean(6, disponibilite);

        // Identification du livre à modifier par son LivreID
        pstmt.setInt(7, Integer.parseInt(livreID));

        // Exécution de la mise à jour
        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Livre modifié avec succès!");

            // Effacement des champs après modification
            titreField.setText("");
            auteurIDField.setText("");
            genreField.setText("");
            isbnField.setText("");
            datePublicationField.setText("");
            disponibiliteCheckBox.setSelected(false);

            // Actualisation de l'affichage des livres
            afficherButtonActionPerformed(evt); 
        } else {
            JOptionPane.showMessageDialog(null, "Erreur : Aucun livre avec cet ID n'a été trouvé.");
        }

    } catch (SQLException e) {
        e.printStackTrace(); // Journalisation de l'erreur
        JOptionPane.showMessageDialog(null, "Erreur lors de la modification du livre : " + e.getMessage());
    }


    }//GEN-LAST:event_modifierButtonActionPerformed

@SuppressWarnings("empty-statement")
    private void afficherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficherButtonActionPerformed
        // TODO add your handling code here:
                                                 
    String sql = "SELECT * FROM Livres";
    
    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {
        
        DefaultTableModel tablemodel = (DefaultTableModel) listlivre.getModel();
        
        // Vider le modèle avant de le remplir
        tablemodel.setRowCount(0);

        while (rs.next()) {
            int livreID = rs.getInt("LivreID");
            String titre = rs.getString("Titre");
            int auteurID = rs.getInt("AuteurID");
            String genre = rs.getString("Genre");
            String isbn = rs.getString("ISBN");
            String datePublication = rs.getString("DatePublication");
            boolean disponibilite = rs.getBoolean("Disponibilite");

            // Créer un tableau d'objets pour ajouter à la table
            Object[] livrelist = {livreID, titre, auteurID, genre, isbn, datePublication, disponibilite};
            
            // Ajouter la ligne au modèle de table
            tablemodel.addRow(livrelist);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erreur lors de la récupération des données.");
    }


    }//GEN-LAST:event_afficherButtonActionPerformed

   public void TableLivreRecherche(String valeur) {
    String[] livre = {"LivreID", "Titre", "AuteurID", "Gener", "ISBN", "DatePublication", "Disponibilite"};
    DefaultTableModel model = new DefaultTableModel(null, livre);

    // SQL مع PreparedStatement لتجنب SQL Injection
    String sql = "SELECT * FROM Livres WHERE Titre LIKE ?";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // إعداد قيمة البحث مع إضافة علامات % في حالة وجود نص
        pstmt.setString(1, "%" + valeur.trim() + "%");

        try (ResultSet rs = pstmt.executeQuery()) {
            boolean found = false;

            // تخزين النتائج في الجدول
            while (rs.next()) {
                found = true;
                String[] afficher = new String[7];
                afficher[0] = rs.getString("LivreID");
                afficher[1] = rs.getString("Titre");
                afficher[2] = rs.getString("AuteurID");
                afficher[3] = rs.getString("Genre");
                afficher[4] = rs.getString("ISBN");
                afficher[5] = rs.getString("DatePublication");
                afficher[6] = rs.getString("Disponibilite");
                model.addRow(afficher);
            }

            // عرض رسالة إذا لم يتم العثور على نتائج
            if (!found) {
                JOptionPane.showMessageDialog(null, "Aucun livre trouvé.");
            }

            // تحديث الجدول بالموديل
            listlivre.setModel(model);

        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erreur lors de la récupération des données.");
    }
}

    
    
    
    private void isbnFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isbnFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isbnFieldActionPerformed

    private void listlivreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listlivreMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_listlivreMouseClicked

    private void datePublicationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePublicationFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datePublicationFieldActionPerformed

    private void listlivreMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listlivreMouseReleased
        // TODO add your handling code here:
         int i = listlivre.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listlivre.getModel();
        livreidField.setText(model.getValueAt(i, 0).toString());
        titreField.setText(model.getValueAt(i, 1).toString());
        auteurIDField.setText(model.getValueAt(i, 2).toString());
        genreField.setText(model.getValueAt(i, 3).toString());
        isbnField.setText(model.getValueAt(i, 4).toString());
        datePublicationField.setText(model.getValueAt(i, 5).toString());
        disponibiliteCheckBox.setText(model.getValueAt(i, 6).toString());

    }//GEN-LAST:event_listlivreMouseReleased

    private void RechercheTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RechercheTextField1KeyReleased
        // TODO add your handling code here:
        String searchText = RechercheTextField1.getText().trim(); 
    if (!searchText.isEmpty()) {
        TableLivreRecherche(searchText);
    } else {
        // إذا كان مربع البحث فارغًا، قم بعرض كل البيانات
        TableLivreRecherche(""); 
    }
    }//GEN-LAST:event_RechercheTextField1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LivreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LivreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LivreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LivreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LivreGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField RechercheTextField1;
    private javax.swing.JButton afficherButton;
    private javax.swing.JButton ajouterButton;
    private javax.swing.JTextField auteurIDField;
    private javax.swing.JFormattedTextField datePublicationField;
    private javax.swing.JCheckBox disponibiliteCheckBox;
    private javax.swing.JTextField genreField;
    private javax.swing.JTextField isbnField;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listlivre;
    private javax.swing.JTextField livreidField;
    private javax.swing.JButton modifierButton;
    private javax.swing.JButton suprimerButton;
    private javax.swing.JTextField titreField;
    // End of variables declaration//GEN-END:variables
}
